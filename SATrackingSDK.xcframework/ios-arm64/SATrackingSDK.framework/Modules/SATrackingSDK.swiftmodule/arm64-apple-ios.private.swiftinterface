// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SATrackingSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Moya
import RxCocoa
import RxSwift
@_exported import SATrackingSDK
import Swift
import _Concurrency
import _StringProcessing
public struct TrackerOptions {
  public let applicationId: Swift.String
  public let partnerId: Swift.String
  public let uid: Swift.String
  public let baseURL: Swift.String
  public let debugMode: Swift.Bool
  public let httpHeaders: [Swift.String : () -> Swift.String]?
  public init(applicationId: Swift.String, partnerId: Swift.String, uid: Swift.String, baseURL: Swift.String, debugMode: Swift.Bool = false, httpHeaders: [Swift.String : () -> Swift.String]? = nil)
}
@_hasMissingDesignatedInitializers public class TechTracker {
  public static let sharedTracker: SATrackingSDK.TechTracker
  public static func initialize(options: SATrackingSDK.TrackerOptions)
  public func event(event: SATrackingSDK.TrackerEvent)
  @objc deinit
}
public enum Events : Swift.String {
  case no_events, add_to_cart, purchase, start_view, stop_view, viewing, ad_imp, ad_click, click, search, scroll
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol TrackerEvent {
  func execute(options: SATrackingSDK.TrackerOptions)
}
public protocol CustomParamsAwareEvent {
  var customParams: [Swift.String : Swift.String]? { get set }
}
public struct AddToCart : Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public mutating func add(id: Swift.String, name: Swift.String, price: Swift.Double, currency: Swift.String, category: Swift.String?, subcategory: Swift.String?, quantity: Swift.Float = 1.0, customParams: [Swift.String : Swift.String]? = [:])
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Purchase : Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public mutating func add(id: Swift.String, name: Swift.String, price: Swift.Double, currency: Swift.String, category: Swift.String?, subcategory: Swift.String?, quantity: Swift.Float = 1.0, customParams: [Swift.String : Swift.String]? = [:])
  public func encode(to encoder: Swift.Encoder) throws
}
public struct StartView : Swift.Encodable, SATrackingSDK.CustomParamsAwareEvent, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var id: Swift.String?
  public var name: Swift.String?
  public var category: Swift.String?
  public var subcategory: Swift.String?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct StopView : SATrackingSDK.CustomParamsAwareEvent, Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var id: Swift.String?
  public var name: Swift.String?
  public var category: Swift.String?
  public var subcategory: Swift.String?
  public var value: Swift.Double?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Viewing : SATrackingSDK.CustomParamsAwareEvent, Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var id: Swift.String?
  public var name: Swift.String?
  public var category: Swift.String?
  public var subcategory: Swift.String?
  public var value: Swift.Double?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Search : SATrackingSDK.CustomParamsAwareEvent, Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var value: Swift.String?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdImp : SATrackingSDK.CustomParamsAwareEvent, Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var placement_id: Swift.String?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var href: Swift.String?
  public var category: Swift.String?
  public var subcategory: Swift.String?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdClick : SATrackingSDK.CustomParamsAwareEvent, Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var placement_id: Swift.String?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var href: Swift.String?
  public var category: Swift.String?
  public var subcategory: Swift.String?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Scroll : SATrackingSDK.CustomParamsAwareEvent, Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var value: Swift.Double?
  public var category: Swift.String?
  public var subcategory: Swift.String?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Click : SATrackingSDK.CustomParamsAwareEvent, Swift.Encodable, SATrackingSDK.TrackerEvent {
  public var customParams: [Swift.String : Swift.String]?
  public var value: Swift.String?
  public var page: Swift.String?
  public init()
  public func execute(options: SATrackingSDK.TrackerOptions)
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class ApiClient {
  @objc deinit
}
extension SATrackingSDK.Events : Swift.Equatable {}
extension SATrackingSDK.Events : Swift.Hashable {}
extension SATrackingSDK.Events : Swift.RawRepresentable {}
